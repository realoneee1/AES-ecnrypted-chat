{"ast":null,"code":"var _jsxFileName = \"D:\\\\messebger\\\\Anonymous-Chat-App\\\\client\\\\src\\\\components\\\\NewConversationModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport { useTheme } from '../contexts/ThemeProvider';\nimport { useContacts } from '../contexts/ContactsProvider';\nimport { useConversations } from '../contexts/ConversationsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function NewConversationModal({\n  closeModal\n}) {\n  _s();\n\n  const {\n    isLightTheme\n  } = useTheme();\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const {\n    contacts\n  } = useContacts();\n  const {\n    createConversation\n  } = useConversations();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    setSelectedContactIds(prevSelectedContactIds => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter(prevId => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...prevSelectedContactIds, contactId];\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      className: isLightTheme ? \"bag-light\" : \"bag-dark\",\n      closeButton: true,\n      children: \"Create Conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      className: isLightTheme ? \"bag-light\" : \"bag-dark\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [contacts.map(contact => /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: contact.id,\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            value: selectedContactIds.includes(contact.id),\n            label: contact.name,\n            onChange: () => handleCheckboxChange(contact.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this)\n        }, contact.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(NewConversationModal, \"6IgNDS8b10GFqLNlIIBns7IwIRw=\", false, function () {\n  return [useTheme, useContacts, useConversations];\n});\n\n_c = NewConversationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewConversationModal\");","map":{"version":3,"sources":["D:/messebger/Anonymous-Chat-App/client/src/components/NewConversationModal.js"],"names":["React","useState","Modal","Form","Button","useTheme","useContacts","useConversations","NewConversationModal","closeModal","isLightTheme","selectedContactIds","setSelectedContactIds","contacts","createConversation","handleSubmit","e","preventDefault","handleCheckboxChange","contactId","prevSelectedContactIds","includes","filter","prevId","map","contact","id","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,iBAApC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;;;AAEA,eAAe,SAASC,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA8C;AAAA;;AACzD,QAAM;AAAEC,IAAAA;AAAF,MAAmBL,QAAQ,EAAjC;AACA,QAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAeP,WAAW,EAAhC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAyBP,gBAAgB,EAA/C;;AAGA,WAASQ,YAAT,CAAsBC,CAAtB,EAAyB;AACrBA,IAAAA,CAAC,CAACC,cAAF;AAEAH,IAAAA,kBAAkB,CAACH,kBAAD,CAAlB;AACAF,IAAAA,UAAU;AACb;;AAED,WAASS,oBAAT,CAA8BC,SAA9B,EAAyC;AACrCP,IAAAA,qBAAqB,CAACQ,sBAAsB,IAAI;AAC5C,UAAIA,sBAAsB,CAACC,QAAvB,CAAgCF,SAAhC,CAAJ,EAAgD;AAC5C,eAAOC,sBAAsB,CAACE,MAAvB,CAA8BC,MAAM,IAAI;AAC3C,iBAAOJ,SAAS,KAAKI,MAArB;AACH,SAFM,CAAP;AAGH,OAJD,MAIO;AACH,eAAO,CAAC,GAAGH,sBAAJ,EAA4BD,SAA5B,CAAP;AACH;AACJ,KARoB,CAArB;AASH;;AAED,sBACI;AAAA,4BACI,QAAC,KAAD,CAAO,MAAP;AAAc,MAAA,SAAS,EAAET,YAAY,GAAG,WAAH,GAAiB,UAAtD;AAAkE,MAAA,WAAW,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD,CAAO,IAAP;AAAY,MAAA,SAAS,EAAEA,YAAY,GAAG,WAAH,GAAiB,UAApD;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEK,YAAhB;AAAA,mBACKF,QAAQ,CAACW,GAAT,CAAaC,OAAO,iBACjB,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAEA,OAAO,CAACC,EAA/B;AAAA,iCACI,QAAC,IAAD,CAAM,KAAN;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,KAAK,EAAEf,kBAAkB,CAACU,QAAnB,CAA4BI,OAAO,CAACC,EAApC,CAFX;AAGI,YAAA,KAAK,EAAED,OAAO,CAACE,IAHnB;AAII,YAAA,QAAQ,EAAE,MAAMT,oBAAoB,CAACO,OAAO,CAACC,EAAT;AAJxC;AAAA;AAAA;AAAA;AAAA;AADJ,WAAwCD,OAAO,CAACC,EAAhD;AAAA;AAAA;AAAA;AAAA,gBADH,CADL,eAWI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAoBH;;GA9CuBlB,oB;UACKH,Q,EAEJC,W,EACUC,gB;;;KAJXC,oB","sourcesContent":["import React, { useState } from 'react'\r\nimport { Modal, Form, Button } from 'react-bootstrap'\r\nimport { useTheme } from '../contexts/ThemeProvider'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n    const { isLightTheme } = useTheme()\r\n    const [selectedContactIds, setSelectedContactIds] = useState([])\r\n    const { contacts } = useContacts()\r\n    const { createConversation } = useConversations()\r\n\r\n    \r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        createConversation(selectedContactIds)\r\n        closeModal()\r\n    }\r\n\r\n    function handleCheckboxChange(contactId) {\r\n        setSelectedContactIds(prevSelectedContactIds => {\r\n            if (prevSelectedContactIds.includes(contactId)) {\r\n                return prevSelectedContactIds.filter(prevId => {\r\n                    return contactId !== prevId\r\n                })\r\n            } else {\r\n                return [...prevSelectedContactIds, contactId]\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header className={isLightTheme ? \"bag-light\" : \"bag-dark\"} closeButton>Create Conversation</Modal.Header>\r\n            <Modal.Body className={isLightTheme ? \"bag-light\" : \"bag-dark\"}>\r\n                <Form onSubmit={handleSubmit}>\r\n                    {contacts.map(contact => (\r\n                        <Form.Group controlId={contact.id} key={contact.id}>\r\n                            <Form.Check\r\n                                type=\"checkbox\"\r\n                                value={selectedContactIds.includes(contact.id)}\r\n                                label={contact.name}\r\n                                onChange={() => handleCheckboxChange(contact.id)}\r\n                            />\r\n                        </Form.Group>\r\n                    ))}\r\n                    <Button type=\"submit\">Create</Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}