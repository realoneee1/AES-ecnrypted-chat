{"ast":null,"code":"var _jsxFileName = \"D:\\\\messebger\\\\EnctyptedAESChat\\\\client\\\\src\\\\contexts\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  let addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender,\n    enckey\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const decryptedKey = CryptoJS.SHA256.decrypt(enckey, key).toString(CryptoJS.enc.Utf8);\n      const newMessage = {\n        sender,\n        text,\n        enckey\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text, enckey) {\n    socket.emit('send-message', {\n      recipients,\n      text,\n      enckey\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id,\n      enckey\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      const enckey = message.enckey;\n      return { ...message,\n        senderName: name,\n        fromMe,\n        enckey\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ConversationsProvider, \"CmF54rin1qzXcyIZFZ+UuxenltQ=\", false, function () {\n  return [useLocalStorage, useContacts, useSocket];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["D:/messebger/EnctyptedAESChat/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","enckey","madeChange","decryptedKey","CryptoJS","SHA256","decrypt","key","toString","enc","Utf8","newMessage","newConversations","map","conversation","arrayEquality","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useContacts } from './ContactsProvider';\r\nimport { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n    return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n    const { contacts } = useContacts()\r\n    const socket = useSocket()\r\n\r\n    function createConversation(recipients) {\r\n        setConversations(prevConversations => {\r\n            return [...prevConversations, { recipients, messages: [] }]\r\n        })\r\n    }\r\n\r\n    \r\n    let addMessageToConversation = useCallback(({ recipients, text, sender, enckey }) => {\r\n        setConversations(prevConversations => {\r\n            let madeChange = false\r\n            const decryptedKey = CryptoJS.SHA256.decrypt(enckey, key).toString(CryptoJS.enc.Utf8);\r\n            const newMessage = { sender, text, enckey }\r\n            const newConversations = prevConversations.map(conversation => {\r\n                if (arrayEquality(conversation.recipients, recipients)) {\r\n                    madeChange = true\r\n                    return {                      \r\n                        ...conversation,\r\n                        messages: [...conversation.messages, newMessage]\r\n                    }\r\n                }\r\n\r\n                return conversation\r\n\r\n            })\r\n\r\n            if (madeChange) {\r\n                return newConversations\r\n            } else {\r\n                return [\r\n                    ...prevConversations,\r\n                    { recipients, messages: [newMessage] }\r\n                ]\r\n            }\r\n        })\r\n    }, [setConversations])\r\n\r\n    useEffect(() => {\r\n        if (socket == null) return\r\n\r\n        socket.on('receive-message', addMessageToConversation)\r\n\r\n        return () => socket.off('receive-message')\r\n    }, [socket, addMessageToConversation])\r\n\r\n    function sendMessage(recipients, text, enckey) {\r\n        socket.emit('send-message', { recipients, text, enckey })\r\n\r\n        addMessageToConversation({ recipients, text, sender: id, enckey })\r\n    }\r\n    const formattedConversations = conversations.map((conversation, index) => {\r\n        const recipients = conversation.recipients.map(recipient => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === recipient\r\n            })\r\n            const name = (contact && contact.name) || recipient\r\n            return { id: recipient, name }\r\n        })\r\n\r\n        const messages = conversation.messages.map(message => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === message.sender\r\n            })\r\n            const name = (contact && contact.name) || message.sender\r\n            const fromMe = id === message.sender\r\n            const enckey = message.enckey           \r\n            return { ...message, senderName: name, fromMe, enckey }\r\n        })\r\n        \r\n        const selected = index === selectedConversationIndex\r\n        return { ...conversation, messages, recipients, selected }\r\n    })\r\n\r\n    const value = {\r\n        conversations: formattedConversations,\r\n        selectedConversation: formattedConversations[selectedConversationIndex],\r\n        sendMessage,\r\n        selectConversationIndex: setSelectedConversationIndex,\r\n        createConversation\r\n    }\r\n\r\n    return (\r\n        <ConversationsContext.Provider value={value}>\r\n            {children}\r\n        </ConversationsContext.Provider>\r\n    )\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n    if (a.length !== b.length) return false\r\n\r\n    a.sort()\r\n    b.sort()\r\n\r\n    return a.every((element, index) => {\r\n        return element === b[index]\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}