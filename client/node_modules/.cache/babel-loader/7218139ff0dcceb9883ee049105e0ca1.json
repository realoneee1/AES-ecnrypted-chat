{"ast":null,"code":"var _jsxFileName = \"D:\\\\messebger\\\\EnctyptedAESChat\\\\client\\\\src\\\\components\\\\OpenConversation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport { Form, InputGroup, Button } from 'react-bootstrap';\nimport CryptoJS from 'crypto-js';\nimport { useConversations } from '../contexts/ConversationsProvider';\nimport { useTheme } from '../contexts/ThemeProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OpenConversation() {\n  _s();\n\n  const {\n    isLightTheme\n  } = useTheme();\n  const key = \"obvwoqcbv21801f19z0zibcoavwpnqwe\";\n  const keyHex = CryptoJS.enc.Utf8.parse(key); // перетворення ключа в байтовий масив\n\n  const keyHexEncoded = CryptoJS.enc.Hex.stringify(keyHex); // кодування ключа\n\n  const [text, setText] = useState('');\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    }\n  }, []);\n  const {\n    sendMessage,\n    selectedConversation\n  } = useConversations();\n\n  function handleSubmit(e) {\n    e.preventDefault(); //AES-128   \n\n    console.log(\"key: \" + keyHexEncoded);\n    let cipher = CryptoJS.AES.encrypt(text, keyHexEncoded).toString();\n    console.log(\"Encrypted message: \" + cipher);\n    sendMessage(selectedConversation.recipients.map(r => r.id), cipher, keyHexEncoded);\n    setText('');\n  }\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSubmit(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: isLightTheme ? \"bag-light d-flex flex-column flex-grow-1\" : \"bag-dark d-flex flex-column flex-grow-1\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 overflow-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column align-items-start justify-content-end px-3\",\n        children: selectedConversation.messages.map((message, index) => {\n          const lastMessage = selectedConversation.messages.length - 1 === index;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: lastMessage ? setRef : null,\n            className: `my-1 d-flex flex-column ${message.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: isLightTheme ? `rounded px-2 py-1 ${message.fromMe ? 'bg-color text-white' : 'bg-light-colorless'}` : `rounded px-2 py-1 ${message.fromMe ? 'bg-color text-white' : 'bg-dark-colorless'}`,\n              children: [CryptoJS.AES.decrypt(message.text, keyHexEncoded).toString(CryptoJS.enc.Utf8), console.log(\"decrypted: \" + CryptoJS.AES.decrypt(message.text, keyHexEncoded).toString(CryptoJS.enc.Utf8)), co]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `text-muted small ${message.fromMe ? 'text-right' : ''}`,\n              children: message.fromMe ? 'You' : message.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"m-2\",\n        children: /*#__PURE__*/_jsxDEV(InputGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            required: true,\n            value: text,\n            onChange: e => setText(e.target.value),\n            onKeyPress: handleKeyPress,\n            placeholder: \"Type Your Message\",\n            style: {\n              height: '75px',\n              resize: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OpenConversation, \"B2PHtMuRXFQK+R2m5R/Yc3scYrY=\", false, function () {\n  return [useTheme, useConversations];\n});\n\n_c = OpenConversation;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenConversation\");","map":{"version":3,"sources":["D:/messebger/EnctyptedAESChat/client/src/components/OpenConversation.js"],"names":["React","useState","useCallback","Form","InputGroup","Button","CryptoJS","useConversations","useTheme","OpenConversation","isLightTheme","key","keyHex","enc","Utf8","parse","keyHexEncoded","Hex","stringify","text","setText","setRef","node","scrollIntoView","smooth","sendMessage","selectedConversation","handleSubmit","e","preventDefault","console","log","cipher","AES","encrypt","toString","recipients","map","r","id","handleKeyPress","messages","message","index","lastMessage","length","fromMe","decrypt","co","senderName","target","value","height","resize"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport { Form, InputGroup, Button } from 'react-bootstrap'\r\nimport CryptoJS from 'crypto-js'\r\n\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\nimport { useTheme } from '../contexts/ThemeProvider';\r\n\r\n\r\nexport default function OpenConversation() {\r\n    const { isLightTheme } = useTheme()\r\n    const key = \"obvwoqcbv21801f19z0zibcoavwpnqwe\";\r\n    const keyHex = CryptoJS.enc.Utf8.parse(key); // перетворення ключа в байтовий масив\r\n    const keyHexEncoded = CryptoJS.enc.Hex.stringify(keyHex); // кодування ключа\r\n    const [text, setText] = useState('')\r\n    const setRef = useCallback(node => {\r\n        if (node) {\r\n            node.scrollIntoView({ smooth: true })\r\n        }\r\n    }, [])\r\n    const { sendMessage, selectedConversation } = useConversations()\r\n\r\n    \r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n        //AES-128   \r\n        console.log(\"key: \" + keyHexEncoded)\r\n        let cipher = CryptoJS.AES.encrypt(text, keyHexEncoded).toString()\r\n        console.log(\"Encrypted message: \" + cipher)\r\n        sendMessage(\r\n            selectedConversation.recipients.map(r => r.id),\r\n            cipher,\r\n            keyHexEncoded\r\n        )\r\n        setText('')\r\n    }\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n          handleSubmit(e)\r\n        }\r\n      };\r\n\r\n    return (\r\n        <div className={isLightTheme ? \"bag-light d-flex flex-column flex-grow-1\" : \"bag-dark d-flex flex-column flex-grow-1\"}>\r\n            <div className=\"flex-grow-1 overflow-auto\">\r\n                <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n                    {selectedConversation.messages.map((message, index) => {\r\n                        const lastMessage = selectedConversation.messages.length - 1 === index\r\n                        return (\r\n                            <div\r\n                                ref={lastMessage ? setRef : null}\r\n                                key={index}\r\n                                className={`my-1 d-flex flex-column ${message.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`}\r\n                            >\r\n                                <div\r\n                                    className={isLightTheme ? `rounded px-2 py-1 ${message.fromMe ? 'bg-color text-white' : 'bg-light-colorless'}` : `rounded px-2 py-1 ${message.fromMe ? 'bg-color text-white' : 'bg-dark-colorless'}`}>\r\n                                    {CryptoJS.AES.decrypt(message.text, keyHexEncoded).toString(CryptoJS.enc.Utf8)}\r\n                                    {console.log(\"decrypted: \" + CryptoJS.AES.decrypt(message.text, keyHexEncoded).toString(CryptoJS.enc.Utf8))  }\r\n                                    {co}\r\n                                    \r\n                                </div>\r\n                                <div className={`text-muted small ${message.fromMe ? 'text-right' : ''}`}>\r\n                                    {message.fromMe ? 'You' : message.senderName}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group className=\"m-2\">\r\n                    <InputGroup>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            required\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                            onKeyPress={handleKeyPress}\r\n                            placeholder=\"Type Your Message\"\r\n                            style={{ height: '75px', resize: 'none' }}                           \r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button type=\"submit\">Send</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}